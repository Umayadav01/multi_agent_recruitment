from __future__ import annotations
import json
from pathlib import Path
from typing import Dict, List, Tuple

from utils.nlp_utils import clean_text, extract_skills, summarize_text
from utils.report_generator import save_json, save_markdown, ensure_dir

class CandidateProfiler:
    def __init__(self, candidates_path: str | Path = "data/candidates.json",
                 out_dir: str | Path = "outputs/reports"):
        self.candidates_path = Path(candidates_path)
        self.out_dir = ensure_dir(out_dir)

    def _career_summary(self, c: Dict) -> str:
        """Summarize based on LinkedIn text + heuristics on experience & role."""
        summary_bits: List[str] = []
        li = clean_text(c.get("linkedin_summary", ""))
        base = summarize_text(li, max_sentences=2)
        summary_bits.append(base)

        yrs = c.get("experience_years", None)
        role = c.get("role", None)
        if yrs is not None or role:
            summary_bits.append(
                f"Current target role: {role or '—'}. "
                f"Overall experience: {yrs} year(s)." if yrs is not None else f"Current target role: {role or '—'}."
            )

        # Projects
        projs = c.get("github_projects", []) or []
        if projs:
            summary_bits.append(f"Notable projects: {', '.join(projs[:5])}.")

        return " ".join([s for s in summary_bits if s]).strip()

    def _skill_scores(self, c: Dict) -> List[Tuple[str, float]]:
        text_blobs = [
            c.get("linkedin_summary", ""),
            " ".join(c.get("skills", [])),
            " ".join(c.get("github_projects", [])),
            c.get("role", ""),
        ]
        big_text = " ".join(map(clean_text, text_blobs))
        return extract_skills(big_text)

    def _highlights(self, c: Dict, skills_scored: List[Tuple[str, float]]) -> List[str]:
        yrs = c.get("experience_years", 0)
        role = c.get("role", "—")
        top_sk = ", ".join([s for s, _ in skills_scored[:3]]) or "N/A"
        hl = [
            f"Strong fit for {role} with top skills: {top_sk}.",
            f"Experience bracket: {yrs} year(s) — consider challenges at appropriate difficulty."
        ]
        return hl

    def build_report(self, c: Dict) -> Dict:
        skills_scored = self._skill_scores(c)
        report = {
            "candidate": {
                "name": c.get("name", "Unknown"),
                "role": c.get("role", "Unknown"),
                "experience_years": c.get("experience_years", None),
            },
            "skills": skills_scored,      # list of (skill, confidence)
            "career_summary": self._career_summary(c),
            "highlights": self._highlights(c, skills_scored),
            "notes": "Auto-generated by CandidateProfiler v1 (free/local models)."
        }
        return report

    def run(self) -> List[Dict]:
        data = json.loads(Path(self.candidates_path).read_text(encoding="utf-8"))
        reports = []
        for c in data:
            rep = self.build_report(c)
            fname_safe = rep["candidate"]["name"].replace(" ", "_")
            save_json(rep, self.out_dir, f"{fname_safe}.json")
            save_markdown(rep, self.out_dir, f"{fname_safe}.md")
            reports.append(rep)
        return reports

if __name__ == "__main__":
    profiler = CandidateProfiler()
    out = profiler.run()
    print(f"Generated {len(out)} Talent Intelligence Reports in outputs/reports/")
