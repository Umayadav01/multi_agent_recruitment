from __future__ import annotations
import random
from pathlib import Path
from typing import Dict, List
from utils.report_generator import ensure_dir, save_json, save_markdown

class AssessmentDesigner:
    def __init__(self, reports_dir: str | Path = "outputs/reports", out_dir: str | Path = "outputs/assessments"):
        self.reports_dir = Path(reports_dir)
        self.out_dir = ensure_dir(out_dir)

    def _generate_challenges(self, candidate: Dict) -> List[str]:
        role = candidate["role"]
        skills = [s for s, _ in candidate.get("skills", [])]
        exp = candidate.get("experience_years", 0)

        challenges = []
        if role == "AI Engineer":
            challenges.append("Build a simple neural network from scratch (no deep learning libraries).")
            challenges.append("Implement a sentiment analysis model using Python and scikit-learn.")
        elif role == "Data Scientist":
            challenges.append("Clean and analyze a dataset; produce key insights with visualizations.")
            challenges.append("Develop a machine learning model and evaluate accuracy.")
        elif role == "Backend Developer":
            challenges.append("Design a REST API for user management with authentication.")
            challenges.append("Optimize a database query for high-traffic scenarios.")
        elif role == "Full Stack Developer":
            challenges.append("Create a small web app with both frontend (React) and backend (Flask/FastAPI).")
            challenges.append("Integrate a third-party API and display results in a dashboard.")

        
        if "Python" in skills:
            challenges.append("Solve 3 coding challenges in Python (algorithms & data structures).")
        if "SQL" in skills:
            challenges.append("Write SQL queries to analyze sales data and generate reports.")

        if exp < 2:
            challenges = challenges[:2]  
        elif exp > 5:
            challenges.append("System design: Architect a scalable AI-based recruitment pipeline.")

        return challenges

    def _evaluation_framework(self) -> Dict:
        return {
            "Problem-Solving Approach": "40%",
            "Code Quality & Efficiency": "30%",
            "Communication & Documentation": "30%",
        }

    def _bias_mitigation_protocol(self) -> List[str]:
        return [
            "Focus only on skills and technical output; ignore demographics.",
            "Avoid assumptions based on candidate's background or university.",
            "Ensure equal scoring rubrics for all candidates.",
        ]

    def build_assessment(self, report: Dict) -> Dict:
        assessment = {
            "candidate": report["candidate"],
            "challenges": self._generate_challenges(report["candidate"]),
            "evaluation_framework": self._evaluation_framework(),
            "bias_mitigation": self._bias_mitigation_protocol(),
            "notes": "Auto-generated by AssessmentDesigner v1."
        }
        return assessment

    def run(self, reports: List[Dict]):
        results = []
        for rep in reports:
            ass = self.build_assessment(rep)
            fname_safe = rep["candidate"]["name"].replace(" ", "_")
            save_json(ass, self.out_dir, f"{fname_safe}_assessment.json")
            save_markdown(ass, self.out_dir, f"{fname_safe}_assessment.md")
            results.append(ass)
        return results

if __name__ == "__main__":
    
    import json
    reports_dir = Path("outputs/reports")
    reports = [json.loads(f.read_text()) for f in reports_dir.glob("*.json")]
    designer = AssessmentDesigner()
    out = designer.run(reports)
    print(f"Generated {len(out)} assessment packages in outputs/assessments/")
